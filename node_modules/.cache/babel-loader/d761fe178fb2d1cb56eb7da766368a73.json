{"ast":null,"code":"var _jsxFileName = \"/home/daniel/Desktop/Hub3/hub3_take_home_challenge/hub3_take_home_challenge/src/components/search/Filter.js\";\nimport React, { useEffect, useState } from 'react';\nimport { Tree } from 'antd';\n\nconst Filter = ({\n  selectedBreeds,\n  dogs,\n  filterChange\n}) => {\n  const [treeData, setTreeData] = useState([]);\n  const [ready, setReady] = useState(false);\n\n  const buildTreeData = list => {\n    return list.reduce((container, breed) => {\n      container.push({\n        title: breed,\n        key: breed,\n        children: []\n      });\n      return container;\n    }, []);\n  };\n\n  useEffect(() => {\n    const fun = async () => {\n      let parents = await buildTreeData(selectedBreeds.sort());\n      let children = await parents.map(parent => {\n        let children = dogs.filter(breed => !!breed.subbreed & breed.breed === parent.title);\n        let childrenList = children.map(ch => ch.subbreed);\n        return { ...parent,\n          children: buildTreeData([...new Set(childrenList)])\n        };\n      });\n      const treeData = await [{\n        title: 'All',\n        key: 'all',\n        children: children\n      }];\n      setTreeData([...treeData]);\n    };\n\n    setReady(false);\n    fun();\n    setReady(true);\n  }, [selectedBreeds, dogs]);\n  console.log(treeData);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, !!treeData.children && !!treeData.children.length && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Tree, {\n    checkable: true,\n    selectable: true,\n    expandedKeys: ['all', ...selectedBreeds],\n    defaultCheckedKeys: ['all'] // onSelect={onSelect}\n    ,\n    onCheck: filterChange,\n    treeData: treeData,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 11\n    }\n  })));\n};\n\nexport default Filter;","map":{"version":3,"sources":["/home/daniel/Desktop/Hub3/hub3_take_home_challenge/hub3_take_home_challenge/src/components/search/Filter.js"],"names":["React","useEffect","useState","Tree","Filter","selectedBreeds","dogs","filterChange","treeData","setTreeData","ready","setReady","buildTreeData","list","reduce","container","breed","push","title","key","children","fun","parents","sort","map","parent","filter","subbreed","childrenList","ch","Set","console","log","length"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,IAAT,QAAqB,MAArB;;AAEA,MAAMC,MAAM,GAAG,CAAC;AAAEC,EAAAA,cAAF;AAAkBC,EAAAA,IAAlB;AAAwBC,EAAAA;AAAxB,CAAD,KAA4C;AACzD,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BP,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM,CAACQ,KAAD,EAAQC,QAAR,IAAoBT,QAAQ,CAAC,KAAD,CAAlC;;AAEA,QAAMU,aAAa,GAAGC,IAAI,IAAI;AAC5B,WAAOA,IAAI,CAACC,MAAL,CAAY,CAACC,SAAD,EAAYC,KAAZ,KAAsB;AACvCD,MAAAA,SAAS,CAACE,IAAV,CAAe;AAAEC,QAAAA,KAAK,EAAEF,KAAT;AAAgBG,QAAAA,GAAG,EAAEH,KAArB;AAA4BI,QAAAA,QAAQ,EAAE;AAAtC,OAAf;AACA,aAAOL,SAAP;AACD,KAHM,EAGJ,EAHI,CAAP;AAID,GALD;;AAOAd,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMoB,GAAG,GAAG,YAAY;AACtB,UAAIC,OAAO,GAAG,MAAMV,aAAa,CAACP,cAAc,CAACkB,IAAf,EAAD,CAAjC;AAEA,UAAIH,QAAQ,GAAG,MAAME,OAAO,CAACE,GAAR,CAAYC,MAAM,IAAI;AACzC,YAAIL,QAAQ,GAAGd,IAAI,CAACoB,MAAL,CAAYV,KAAK,IAAI,CAAC,CAACA,KAAK,CAACW,QAAR,GAAmBX,KAAK,CAACA,KAAN,KAAgBS,MAAM,CAACP,KAA/D,CAAf;AACA,YAAIU,YAAY,GAAGR,QAAQ,CAACI,GAAT,CAAaK,EAAE,IAAIA,EAAE,CAACF,QAAtB,CAAnB;AACA,eAAO,EAAE,GAAGF,MAAL;AAAaL,UAAAA,QAAQ,EAAER,aAAa,CAAC,CAAC,GAAG,IAAIkB,GAAJ,CAAQF,YAAR,CAAJ,CAAD;AAApC,SAAP;AACD,OAJoB,CAArB;AAMA,YAAMpB,QAAQ,GAAG,MAAM,CAAC;AAAEU,QAAAA,KAAK,EAAE,KAAT;AAAgBC,QAAAA,GAAG,EAAE,KAArB;AAA4BC,QAAAA,QAAQ,EAAEA;AAAtC,OAAD,CAAvB;AACAX,MAAAA,WAAW,CAAC,CAAC,GAAGD,QAAJ,CAAD,CAAX;AACD,KAXD;;AAaAG,IAAAA,QAAQ,CAAC,KAAD,CAAR;AACAU,IAAAA,GAAG;AACHV,IAAAA,QAAQ,CAAC,IAAD,CAAR;AACD,GAjBQ,EAiBN,CAACN,cAAD,EAAiBC,IAAjB,CAjBM,CAAT;AAmBAyB,EAAAA,OAAO,CAACC,GAAR,CAAYxB,QAAZ;AACA,sBACE,0CAEI,CAAC,CAACA,QAAQ,CAACY,QAAX,IAAuB,CAAC,CAACZ,QAAQ,CAACY,QAAT,CAAkBa,MAA3C,iBAAqD,uDACnD,oBAAC,IAAD;AACE,IAAA,SAAS,MADX;AAEE,IAAA,UAAU,MAFZ;AAGE,IAAA,YAAY,EAAE,CAAC,KAAD,EAAQ,GAAG5B,cAAX,CAHhB;AAIE,IAAA,kBAAkB,EAAE,CAAC,KAAD,CAJtB,CAKE;AALF;AAME,IAAA,OAAO,EAAEE,YANX;AAOE,IAAA,QAAQ,EAAEC,QAPZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADmD,CAFzD,CADF;AAiBD,CAhDD;;AAkDA,eAAeJ,MAAf","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport { Tree } from 'antd'\n\nconst Filter = ({ selectedBreeds, dogs, filterChange }) => {\n  const [treeData, setTreeData] = useState([])\n  const [ready, setReady] = useState(false)\n\n  const buildTreeData = list => {\n    return list.reduce((container, breed) => {\n      container.push({ title: breed, key: breed, children: [] })\n      return container\n    }, [])\n  }\n\n  useEffect(() => {\n    const fun = async () => {\n      let parents = await buildTreeData(selectedBreeds.sort())\n\n      let children = await parents.map(parent => {\n        let children = dogs.filter(breed => !!breed.subbreed & breed.breed === parent.title)\n        let childrenList = children.map(ch => ch.subbreed)\n        return { ...parent, children: buildTreeData([...new Set(childrenList)]) }\n      })\n\n      const treeData = await [{ title: 'All', key: 'all', children: children }]\n      setTreeData([...treeData])\n    }\n\n    setReady(false)\n    fun()\n    setReady(true)\n  }, [selectedBreeds, dogs])\n\n  console.log(treeData)\n  return (\n    <>\n      {\n        !!treeData.children && !!treeData.children.length && <>\n          <Tree\n            checkable\n            selectable\n            expandedKeys={['all', ...selectedBreeds]}\n            defaultCheckedKeys={['all']}\n            // onSelect={onSelect}\n            onCheck={filterChange}\n            treeData={treeData}\n          />\n        </>\n      }\n    </>\n  )\n}\n\nexport default Filter\n"]},"metadata":{},"sourceType":"module"}