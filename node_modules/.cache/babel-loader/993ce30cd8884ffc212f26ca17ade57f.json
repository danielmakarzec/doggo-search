{"ast":null,"code":"var _jsxFileName = \"/home/daniel/Desktop/Hub3/hub3_take_home_challenge/hub3_take_home_challenge/src/components/search/Filter.js\";\nimport React, { useEffect, useState } from 'react';\nimport { Tree } from 'antd';\nimport { getDataFromLocalStorage } from '../../utilities';\n\nconst Filter = ({\n  dogs,\n  filterChange\n}) => {\n  const selectedBreeds = getDataFromLocalStorage('selectedBreeds');\n  const [treeData, setTreeData] = useState([]);\n\n  const buildTreeData = list => {\n    return list.reduce((container, breed) => {\n      container.push({\n        title: breed,\n        key: breed,\n        children: []\n      });\n      return container;\n    }, []);\n  };\n\n  useEffect(() => {\n    let parents = buildTreeData(selectedBreeds.sort());\n    let children = parents.map(parent => {\n      let children = dogs.filter(breed => !!breed.subbreed & breed.breed === parent.title);\n      let childrenList = children.map(ch => ch.subbreed);\n      return { ...parent,\n        children: buildTreeData([...new Set(childrenList)])\n      };\n    });\n    const treeData = [{\n      title: 'All',\n      key: 'all',\n      children: children\n    }];\n    setTreeData([...treeData]);\n  }, [selectedBreeds, dogs]);\n  return /*#__PURE__*/React.createElement(React.Fragment, null,\n  /*#__PURE__*/\n  // selectedBreeds.length > 0 && <>\n  React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Tree, {\n    checkable: true,\n    selectable: true,\n    expandedKeys: ['all', ...selectedBreeds],\n    defaultCheckedKeys: ['all'] // onSelect={onSelect}\n    ,\n    onCheck: filterChange,\n    treeData: treeData,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 11\n    }\n  })));\n};\n\nexport default Filter;","map":{"version":3,"sources":["/home/daniel/Desktop/Hub3/hub3_take_home_challenge/hub3_take_home_challenge/src/components/search/Filter.js"],"names":["React","useEffect","useState","Tree","getDataFromLocalStorage","Filter","dogs","filterChange","selectedBreeds","treeData","setTreeData","buildTreeData","list","reduce","container","breed","push","title","key","children","parents","sort","map","parent","filter","subbreed","childrenList","ch","Set"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,IAAT,QAAqB,MAArB;AACA,SAASC,uBAAT,QAAwC,iBAAxC;;AAEA,MAAMC,MAAM,GAAG,CAAC;AAAEC,EAAAA,IAAF;AAAQC,EAAAA;AAAR,CAAD,KAA4B;AACzC,QAAMC,cAAc,GAAGJ,uBAAuB,CAAC,gBAAD,CAA9C;AACA,QAAM,CAACK,QAAD,EAAWC,WAAX,IAA0BR,QAAQ,CAAC,EAAD,CAAxC;;AAEA,QAAMS,aAAa,GAAGC,IAAI,IAAI;AAC5B,WAAOA,IAAI,CAACC,MAAL,CAAY,CAACC,SAAD,EAAYC,KAAZ,KAAsB;AACvCD,MAAAA,SAAS,CAACE,IAAV,CAAe;AAAEC,QAAAA,KAAK,EAAEF,KAAT;AAAgBG,QAAAA,GAAG,EAAEH,KAArB;AAA4BI,QAAAA,QAAQ,EAAE;AAAtC,OAAf;AACA,aAAOL,SAAP;AACD,KAHM,EAGJ,EAHI,CAAP;AAID,GALD;;AAOAb,EAAAA,SAAS,CAAC,MAAM;AACd,QAAImB,OAAO,GAAGT,aAAa,CAACH,cAAc,CAACa,IAAf,EAAD,CAA3B;AAEA,QAAIF,QAAQ,GAAGC,OAAO,CAACE,GAAR,CAAYC,MAAM,IAAI;AACnC,UAAIJ,QAAQ,GAAGb,IAAI,CAACkB,MAAL,CAAYT,KAAK,IAAI,CAAC,CAACA,KAAK,CAACU,QAAR,GAAmBV,KAAK,CAACA,KAAN,KAAgBQ,MAAM,CAACN,KAA/D,CAAf;AACA,UAAIS,YAAY,GAAGP,QAAQ,CAACG,GAAT,CAAaK,EAAE,IAAIA,EAAE,CAACF,QAAtB,CAAnB;AACA,aAAO,EAAE,GAAGF,MAAL;AAAaJ,QAAAA,QAAQ,EAAER,aAAa,CAAC,CAAC,GAAG,IAAIiB,GAAJ,CAAQF,YAAR,CAAJ,CAAD;AAApC,OAAP;AACD,KAJc,CAAf;AAMA,UAAMjB,QAAQ,GAAG,CAAC;AAAEQ,MAAAA,KAAK,EAAE,KAAT;AAAgBC,MAAAA,GAAG,EAAE,KAArB;AAA4BC,MAAAA,QAAQ,EAAEA;AAAtC,KAAD,CAAjB;AACAT,IAAAA,WAAW,CAAC,CAAC,GAAGD,QAAJ,CAAD,CAAX;AACD,GAXQ,EAWN,CAACD,cAAD,EAAiBF,IAAjB,CAXM,CAAT;AAcA,sBACE;AAAA;AAEI;AACA,yDACE,oBAAC,IAAD;AACE,IAAA,SAAS,MADX;AAEE,IAAA,UAAU,MAFZ;AAGE,IAAA,YAAY,EAAE,CAAC,KAAD,EAAQ,GAAGE,cAAX,CAHhB;AAIE,IAAA,kBAAkB,EAAE,CAAC,KAAD,CAJtB,CAKE;AALF;AAME,IAAA,OAAO,EAAED,YANX;AAOE,IAAA,QAAQ,EAAEE,QAPZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAHJ,CADF;AAkBD,CA3CD;;AA6CA,eAAeJ,MAAf","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport { Tree } from 'antd'\nimport { getDataFromLocalStorage } from '../../utilities'\n\nconst Filter = ({ dogs, filterChange }) => {\n  const selectedBreeds = getDataFromLocalStorage('selectedBreeds')\n  const [treeData, setTreeData] = useState([])\n\n  const buildTreeData = list => {\n    return list.reduce((container, breed) => {\n      container.push({ title: breed, key: breed, children: [] })\n      return container\n    }, [])\n  }\n\n  useEffect(() => {\n    let parents = buildTreeData(selectedBreeds.sort())\n\n    let children = parents.map(parent => {\n      let children = dogs.filter(breed => !!breed.subbreed & breed.breed === parent.title)\n      let childrenList = children.map(ch => ch.subbreed)\n      return { ...parent, children: buildTreeData([...new Set(childrenList)]) }\n    })\n\n    const treeData = [{ title: 'All', key: 'all', children: children }]\n    setTreeData([...treeData])\n  }, [selectedBreeds, dogs])\n\n\n  return (\n    <>\n      {\n        // selectedBreeds.length > 0 && <>\n        <>\n          <Tree\n            checkable\n            selectable\n            expandedKeys={['all', ...selectedBreeds]}\n            defaultCheckedKeys={['all']}\n            // onSelect={onSelect}\n            onCheck={filterChange}\n            treeData={treeData}\n          />\n        </>\n      }\n    </>\n  )\n}\n\nexport default Filter\n"]},"metadata":{},"sourceType":"module"}