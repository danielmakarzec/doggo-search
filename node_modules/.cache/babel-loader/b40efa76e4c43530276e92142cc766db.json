{"ast":null,"code":"var _jsxFileName = \"/home/daniel/Desktop/Hub3/hub3_take_home_challenge/hub3_take_home_challenge/src/components/search/Filter.js\";\nimport React, { useEffect, useState } from 'react';\nimport { Tree } from 'antd';\n\nconst Filter = ({\n  selectedBreeds,\n  dogs\n}) => {\n  const [treeData, setTreeData] = useState([]);\n  console.log([...selectedBreeds]);\n  useEffect(() => {\n    const buildTreeData = list => {\n      return list.reduce((container, breed) => {\n        container.push({\n          title: breed,\n          key: breed,\n          children: []\n        });\n        return container;\n      }, []);\n    };\n\n    let parents = buildTreeData(selectedBreeds.sort());\n    let children = parents.map(parent => {\n      let children = dogs.filter(breed => !!breed.subbreed & breed.breed === parent.title);\n      let childrenList = children.map(ch => ch.subbreed);\n      return { ...parent,\n        children: buildTreeData([...new Set(childrenList)])\n      };\n    });\n    const treeData = [{\n      title: 'All',\n      key: 'all',\n      children: children\n    }];\n    console.log(treeData);\n    setTreeData([...treeData]);\n  }, [selectedBreeds, dogs]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 5\n    }\n  }, selectedBreeds.length > 0 && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Tree, {\n    checkable: true,\n    selectable: true,\n    expandedKeys: ['all', ...selectedBreeds],\n    checkedKeys: ['all'] // onSelect={onSelect}\n    // onCheck={onCheck}\n    ,\n    treeData: treeData,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 11\n    }\n  })));\n};\n\nexport default Filter;","map":{"version":3,"sources":["/home/daniel/Desktop/Hub3/hub3_take_home_challenge/hub3_take_home_challenge/src/components/search/Filter.js"],"names":["React","useEffect","useState","Tree","Filter","selectedBreeds","dogs","treeData","setTreeData","console","log","buildTreeData","list","reduce","container","breed","push","title","key","children","parents","sort","map","parent","filter","subbreed","childrenList","ch","Set","length"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,IAAT,QAAqB,MAArB;;AAEA,MAAMC,MAAM,GAAG,CAAC;AAAEC,EAAAA,cAAF;AAAkBC,EAAAA;AAAlB,CAAD,KAA8B;AAC3C,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BN,QAAQ,CAAC,EAAD,CAAxC;AAEAO,EAAAA,OAAO,CAACC,GAAR,CAAY,CAAC,GAAGL,cAAJ,CAAZ;AACAJ,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMU,aAAa,GAAGC,IAAI,IAAI;AAC5B,aAAOA,IAAI,CAACC,MAAL,CAAY,CAACC,SAAD,EAAYC,KAAZ,KAAsB;AACvCD,QAAAA,SAAS,CAACE,IAAV,CAAe;AAAEC,UAAAA,KAAK,EAAEF,KAAT;AAAgBG,UAAAA,GAAG,EAAEH,KAArB;AAA4BI,UAAAA,QAAQ,EAAE;AAAtC,SAAf;AACA,eAAOL,SAAP;AACD,OAHM,EAGJ,EAHI,CAAP;AAID,KALD;;AAOA,QAAIM,OAAO,GAAGT,aAAa,CAACN,cAAc,CAACgB,IAAf,EAAD,CAA3B;AAEA,QAAIF,QAAQ,GAAGC,OAAO,CAACE,GAAR,CAAYC,MAAM,IAAI;AACnC,UAAIJ,QAAQ,GAAGb,IAAI,CAACkB,MAAL,CAAYT,KAAK,IAAI,CAAC,CAACA,KAAK,CAACU,QAAR,GAAmBV,KAAK,CAACA,KAAN,KAAgBQ,MAAM,CAACN,KAA/D,CAAf;AACA,UAAIS,YAAY,GAAGP,QAAQ,CAACG,GAAT,CAAaK,EAAE,IAAIA,EAAE,CAACF,QAAtB,CAAnB;AACA,aAAO,EAAE,GAAGF,MAAL;AAAaJ,QAAAA,QAAQ,EAAER,aAAa,CAAC,CAAC,GAAG,IAAIiB,GAAJ,CAAQF,YAAR,CAAJ,CAAD;AAApC,OAAP;AACD,KAJc,CAAf;AAMA,UAAMnB,QAAQ,GAAG,CAAC;AAAEU,MAAAA,KAAK,EAAE,KAAT;AAAgBC,MAAAA,GAAG,EAAE,KAArB;AAA4BC,MAAAA,QAAQ,EAAEA;AAAtC,KAAD,CAAjB;AACAV,IAAAA,OAAO,CAACC,GAAR,CAAYH,QAAZ;AACAC,IAAAA,WAAW,CAAC,CAAC,GAAGD,QAAJ,CAAD,CAAX;AACD,GAnBQ,EAmBN,CAACF,cAAD,EAAiBC,IAAjB,CAnBM,CAAT;AAqBA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEID,cAAc,CAACwB,MAAf,GAAwB,CAAxB,iBAA6B,uDAC3B,oBAAC,IAAD;AACE,IAAA,SAAS,MADX;AAEE,IAAA,UAAU,MAFZ;AAGE,IAAA,YAAY,EAAE,CAAC,KAAD,EAAQ,GAAGxB,cAAX,CAHhB;AAIE,IAAA,WAAW,EAAE,CAAC,KAAD,CAJf,CAKE;AACA;AANF;AAOE,IAAA,QAAQ,EAAEE,QAPZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAD2B,CAFjC,CADF;AAiBD,CA1CD;;AA4CA,eAAeH,MAAf","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport { Tree } from 'antd'\n\nconst Filter = ({ selectedBreeds, dogs }) => {\n  const [treeData, setTreeData] = useState([])\n\n  console.log([...selectedBreeds])\n  useEffect(() => {\n    const buildTreeData = list => {\n      return list.reduce((container, breed) => {\n        container.push({ title: breed, key: breed, children: [] })\n        return container\n      }, [])\n    }\n\n    let parents = buildTreeData(selectedBreeds.sort())\n\n    let children = parents.map(parent => {\n      let children = dogs.filter(breed => !!breed.subbreed & breed.breed === parent.title)\n      let childrenList = children.map(ch => ch.subbreed)\n      return { ...parent, children: buildTreeData([...new Set(childrenList)]) }\n    })\n\n    const treeData = [{ title: 'All', key: 'all', children: children }]\n    console.log(treeData)\n    setTreeData([...treeData])\n  }, [selectedBreeds, dogs])\n\n  return (\n    <div>\n      {\n        selectedBreeds.length > 0 && <>\n          <Tree\n            checkable\n            selectable\n            expandedKeys={['all', ...selectedBreeds]}\n            checkedKeys={['all']}\n            // onSelect={onSelect}\n            // onCheck={onCheck}\n            treeData={treeData}\n          />\n        </>\n      }\n    </div>\n  )\n}\n\nexport default Filter\n"]},"metadata":{},"sourceType":"module"}