{"ast":null,"code":"var _jsxFileName = \"/home/daniel/Desktop/Hub3/hub3_take_home_challenge/hub3_take_home_challenge/src/components/search/Content.js\";\nimport React, { useEffect, useState } from 'react';\nimport { Tree } from 'antd';\nimport Dogs from './Dogs';\nimport axios from 'axios';\nimport DogCard from './DogCard';\n\nconst Content = ({\n  selectedBreeds\n}) => {\n  const [filteredBreeds, setFilteredBreeds] = useState(selectedBreeds);\n  const [dogs, setDogs] = useState([]);\n\n  const buildDogObjects = data => {\n    return data.reduce((array, imgUrl) => {\n      const [url, breed, subbreed] = imgUrl.match(/.*\\/(\\w+)\\-?(\\w*)\\/.*$/);\n      const obj = {};\n      obj['name'] = !!subbreed ? subbreed : breed;\n      obj['breed'] = breed;\n      obj['subbreed'] = subbreed;\n      obj['img'] = url;\n      array.push(obj);\n      return array;\n    }, []);\n  };\n\n  const getDogs = breeds => {\n    const requests = !!breeds.length ? breeds.map(breed => axios.get(`https://dog.ceo/api/breed/${breed}/images`)) : [axios.get(`https://dog.ceo/api/breeds/image/random/12`)];\n    return axios.all([...requests]).then(res => {\n      const dogs = res.map(r => r.data.message);\n      return dogs.flat();\n    }).catch(err => console.error(err));\n  };\n\n  useEffect(() => {\n    getDogs(selectedBreeds).then(res => {\n      const dogObjects = buildDogObjects(res);\n      setDogs(dogObjects);\n    });\n  }, [selectedBreeds]);\n  console.log(filteredBreeds);\n  const [treeData, setTreeData] = useState([]);\n  useEffect(() => {\n    const buildTreeData = list => {\n      return list.reduce((container, breed) => {\n        container.push({\n          title: breed,\n          key: breed,\n          children: []\n        });\n        return [...new Set(container)];\n      }, []);\n    };\n\n    let parents = buildTreeData(selectedBreeds.sort());\n    let children = parents.map(parent => {\n      let children = dogs.filter(breed => !!breed.subbreed & breed.breed === parent.title);\n      let childrenList = children.map(ch => ch.subbreed);\n      return { ...parent,\n        children: buildTreeData(...new Set(childrenList))\n      };\n    });\n    const treeData = [{\n      title: 'All',\n      key: 'all',\n      children: children\n    }];\n    console.log(treeData);\n    setTreeData([...treeData]);\n  }, [selectedBreeds]); // console.log(treeData)\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"content\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"filter\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }\n  },\n  /*#__PURE__*/\n  // selectedBreeds.length > 0 && <>\n  React.createElement(Tree, {\n    checkable: true // defaultSelectedKeys={['0-0-0', '0-0-1']}\n    // autoExpandParent\n    // defaultExpandedKeys={[...selectedBreeds]}\n    // defaultCheckedKeys={[...selectedBreeds]}\n    // onSelect={onSelect}\n    // onCheck={onCheck}\n    ,\n    treeData: treeData,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 11\n    }\n  }) // </>\n  ), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"dog_cards\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }\n  }, dogs.length > 0 && dogs.map(dog => {\n    return /*#__PURE__*/React.createElement(DogCard, {\n      key: dog.img,\n      img_url: dog.img,\n      breed: dog.breed,\n      subbreed: dog.subbreed,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 20\n      }\n    });\n  })));\n};\n\nexport default Content;","map":{"version":3,"sources":["/home/daniel/Desktop/Hub3/hub3_take_home_challenge/hub3_take_home_challenge/src/components/search/Content.js"],"names":["React","useEffect","useState","Tree","Dogs","axios","DogCard","Content","selectedBreeds","filteredBreeds","setFilteredBreeds","dogs","setDogs","buildDogObjects","data","reduce","array","imgUrl","url","breed","subbreed","match","obj","push","getDogs","breeds","requests","length","map","get","all","then","res","r","message","flat","catch","err","console","error","dogObjects","log","treeData","setTreeData","buildTreeData","list","container","title","key","children","Set","parents","sort","parent","filter","childrenList","ch","dog","img"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport { Tree } from 'antd'\nimport Dogs from './Dogs'\nimport axios from 'axios'\nimport DogCard from './DogCard'\n\nconst Content = ({ selectedBreeds }) => {\n  const [filteredBreeds, setFilteredBreeds] = useState(selectedBreeds)\n  const [dogs, setDogs] = useState([])\n\n  const buildDogObjects = data => {\n    return data.reduce((array, imgUrl) => {\n      const [url, breed, subbreed] = imgUrl.match(/.*\\/(\\w+)\\-?(\\w*)\\/.*$/)\n      const obj = {}\n      obj['name'] = !!subbreed ? subbreed : breed\n      obj['breed'] = breed\n      obj['subbreed'] = subbreed\n      obj['img'] = url\n      array.push(obj)\n      return array\n    }, [])\n  }\n\n  const getDogs = breeds => {\n    const requests = !!breeds.length\n      ? breeds.map(breed => axios.get(`https://dog.ceo/api/breed/${breed}/images`))\n      : [axios.get(`https://dog.ceo/api/breeds/image/random/12`)]\n\n    return axios.all([...requests])\n      .then(res => {\n        const dogs = res.map(r => r.data.message)\n        return dogs.flat()\n      })\n      .catch(err => console.error(err))\n  }\n\n  useEffect(() => {\n    getDogs(selectedBreeds)\n      .then(res => {\n        const dogObjects = buildDogObjects(res)\n        setDogs(dogObjects)\n      })\n  }, [selectedBreeds])\n\n  console.log(filteredBreeds)\n\n\n\n\n  const [treeData, setTreeData] = useState([])\n\n  useEffect(() => {\n    const buildTreeData = list => {\n      return list.reduce((container, breed) => {\n        container.push({ title: breed, key: breed, children: [] })\n        return [...new Set(container)]\n      }, [])\n    }\n\n    let parents = buildTreeData(selectedBreeds.sort())\n\n    let children = parents.map(parent => {\n      let children = dogs.filter(breed => !!breed.subbreed & breed.breed === parent.title)\n      let childrenList = children.map(ch => ch.subbreed)\n      return { ...parent, children: buildTreeData(...new Set(childrenList)) }\n    })\n\n    const treeData = [{ title: 'All', key: 'all', children: children }]\n    console.log(treeData)\n    setTreeData([...treeData])\n  }, [selectedBreeds])\n\n\n  // console.log(treeData)\n  return (\n    <div className=\"content\" >\n      <div className=\"filter\">\n        {\n          // selectedBreeds.length > 0 && <>\n          <Tree\n            checkable\n            // defaultSelectedKeys={['0-0-0', '0-0-1']}\n            // autoExpandParent\n            // defaultExpandedKeys={[...selectedBreeds]}\n            // defaultCheckedKeys={[...selectedBreeds]}\n            // onSelect={onSelect}\n            // onCheck={onCheck}\n            treeData={treeData}\n          />\n          // </>\n        }\n      </div>\n      {/* <Dogs breed={breed} /> */}\n      <div className=\"dog_cards\" >\n        {\n          dogs.length > 0 && dogs.map(dog => {\n            return <DogCard key={dog.img} img_url={dog.img} breed={dog.breed} subbreed={dog.subbreed} />\n          })\n        }\n      </div >\n    </div >\n  )\n}\n\nexport default Content\n"]},"metadata":{},"sourceType":"module"}