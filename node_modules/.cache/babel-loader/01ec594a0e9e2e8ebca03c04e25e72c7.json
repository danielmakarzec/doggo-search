{"ast":null,"code":"var _jsxFileName = \"/home/daniel/Desktop/Hub3/hub3_take_home_challenge/hub3_take_home_challenge/src/components/search/Content.js\";\nimport React, { useEffect, useState } from 'react';\nimport { Checkbox, Divider, Tree } from 'antd';\nimport Dogs from './Dogs';\nimport axios from 'axios';\nimport DogCard from './DogCard';\nconst CheckboxGroup = Checkbox.Group;\n\nconst Content = ({\n  selectedBreeds\n}) => {\n  const [filteredBreeds, setFilteredBreeds] = useState(selectedBreeds);\n  const [dogs, setDogs] = useState([]);\n\n  const buildDogObjects = data => {\n    return data.reduce((array, imgUrl) => {\n      const [url, breed, subbreed] = imgUrl.match(/.*\\/(\\w+)\\-?(\\w*)\\/.*$/);\n      const obj = {};\n      obj['name'] = !!subbreed ? subbreed : breed;\n      obj['breed'] = breed;\n      obj['subbreed'] = subbreed;\n      obj['img'] = url;\n      array.push(obj);\n      return array;\n    }, []);\n  };\n\n  const getDogs = breeds => {\n    const requests = !!breeds.length ? breeds.map(breed => axios.get(`https://dog.ceo/api/breed/${breed}/images`)) : [axios.get(`https://dog.ceo/api/breeds/image/random/12`)];\n    return axios.all([...requests]).then(res => {\n      const dogs = res.map(r => r.data.message);\n      return dogs.flat();\n    }).catch(err => console.error(err));\n  };\n\n  useEffect(() => {\n    getDogs(selectedBreeds).then(res => {\n      const dogObjects = buildDogObjects(res);\n      setDogs(dogObjects);\n    });\n  }, [selectedBreeds]);\n  console.log(filteredBreeds);\n\n  const buildTreeData = list => {\n    return list.reduce((container, breed) => {\n      container.push({\n        title: breed,\n        key: breed,\n        children: []\n      });\n      return [...new Set(container)];\n    }, []);\n  };\n\n  let tree = buildTreeData(selectedBreeds.sort());\n  let treeData = tree.map(parent => {\n    let children = dogs.filter(breed => !!breed.subbreed & breed.breed === parent.title);\n    let childrenList = children.map(ch => ch.subbreed);\n    const allChildren = { ...parent,\n      children: buildTreeData(childrenList)\n    };\n    return {\n      title: 'All',\n      key: 'all',\n      cihldren: allChildren\n    };\n  });\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"content\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"filter\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }\n  }, selectedBreeds.length > 0 && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Tree, {\n    checkable: true // defaultSelectedKeys={['0-0-0', '0-0-1']}\n    ,\n    autoExpandParent: true,\n    defaultExpandedKeys: [],\n    defaultCheckedKeys: [] // onSelect={onSelect}\n    // onCheck={onCheck}\n    ,\n    treeData: treeData,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"dog_cards\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }\n  }, dogs.length > 0 && dogs.map(dog => {\n    return /*#__PURE__*/React.createElement(DogCard, {\n      key: dog.img,\n      img_url: dog.img,\n      breed: dog.breed,\n      subbreed: dog.subbreed,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 20\n      }\n    });\n  })));\n};\n\nexport default Content;","map":{"version":3,"sources":["/home/daniel/Desktop/Hub3/hub3_take_home_challenge/hub3_take_home_challenge/src/components/search/Content.js"],"names":["React","useEffect","useState","Checkbox","Divider","Tree","Dogs","axios","DogCard","CheckboxGroup","Group","Content","selectedBreeds","filteredBreeds","setFilteredBreeds","dogs","setDogs","buildDogObjects","data","reduce","array","imgUrl","url","breed","subbreed","match","obj","push","getDogs","breeds","requests","length","map","get","all","then","res","r","message","flat","catch","err","console","error","dogObjects","log","buildTreeData","list","container","title","key","children","Set","tree","sort","treeData","parent","filter","childrenList","ch","allChildren","cihldren","dog","img"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport { Checkbox, Divider, Tree } from 'antd'\nimport Dogs from './Dogs'\nimport axios from 'axios'\nimport DogCard from './DogCard'\nconst CheckboxGroup = Checkbox.Group\n\nconst Content = ({ selectedBreeds }) => {\n  const [filteredBreeds, setFilteredBreeds] = useState(selectedBreeds)\n  const [dogs, setDogs] = useState([])\n\n  const buildDogObjects = data => {\n    return data.reduce((array, imgUrl) => {\n      const [url, breed, subbreed] = imgUrl.match(/.*\\/(\\w+)\\-?(\\w*)\\/.*$/)\n      const obj = {}\n      obj['name'] = !!subbreed ? subbreed : breed\n      obj['breed'] = breed\n      obj['subbreed'] = subbreed\n      obj['img'] = url\n      array.push(obj)\n      return array\n    }, [])\n  }\n\n  const getDogs = breeds => {\n    const requests = !!breeds.length\n      ? breeds.map(breed => axios.get(`https://dog.ceo/api/breed/${breed}/images`))\n      : [axios.get(`https://dog.ceo/api/breeds/image/random/12`)]\n\n    return axios.all([...requests])\n      .then(res => {\n        const dogs = res.map(r => r.data.message)\n        return dogs.flat()\n      })\n      .catch(err => console.error(err))\n  }\n\n  useEffect(() => {\n    getDogs(selectedBreeds)\n      .then(res => {\n        const dogObjects = buildDogObjects(res)\n        setDogs(dogObjects)\n      })\n  }, [selectedBreeds])\n\n  console.log(filteredBreeds)\n\n\n  const buildTreeData = list => {\n    return list.reduce((container, breed) => {\n      container.push({ title: breed, key: breed, children: [] })\n      return [...new Set(container)]\n    }, [])\n  }\n\n  let tree = buildTreeData(selectedBreeds.sort())\n\n  let treeData = tree.map(parent => {\n    let children = dogs.filter(breed => !!breed.subbreed & breed.breed === parent.title)\n    let childrenList = children.map(ch => ch.subbreed)\n    const allChildren = { ...parent, children: buildTreeData(childrenList) }\n    return { title: 'All', key: 'all', cihldren: allChildren }\n  })\n\n\n  return (\n    <div className=\"content\" >\n      <div className=\"filter\">\n        {\n          selectedBreeds.length > 0 && <>\n            <Tree\n              checkable\n              // defaultSelectedKeys={['0-0-0', '0-0-1']}\n              autoExpandParent\n              defaultExpandedKeys={[]}\n              defaultCheckedKeys={[]}\n              // onSelect={onSelect}\n              // onCheck={onCheck}\n              treeData={treeData}\n            />\n          </>\n        }\n      </div>\n      {/* <Dogs breed={breed} /> */}\n      <div className=\"dog_cards\" >\n        {\n          dogs.length > 0 && dogs.map(dog => {\n            return <DogCard key={dog.img} img_url={dog.img} breed={dog.breed} subbreed={dog.subbreed} />\n          })\n        }\n      </div >\n    </div >\n  )\n}\n\nexport default Content\n"]},"metadata":{},"sourceType":"module"}