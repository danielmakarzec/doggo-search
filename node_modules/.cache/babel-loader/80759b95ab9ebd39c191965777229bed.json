{"ast":null,"code":"var _jsxFileName = \"/home/daniel/Desktop/Hub3/hub3_take_home_challenge/hub3_take_home_challenge/src/components/search/Content.js\";\nimport React, { useEffect, useState } from 'react';\nimport { Checkbox, Divider } from 'antd';\nimport Dogs from './Dogs';\nimport axios from 'axios';\nimport DogCard from './DogCard';\nconst CheckboxGroup = Checkbox.Group;\n\nconst Content = ({\n  selectedBreeds\n}) => {\n  const [filteredBreeds, setFilteredBreeds] = useState(selectedBreeds);\n  const [dogs, setDogs] = useState([]);\n  const [checkedList, setCheckedList] = useState([]);\n  const [indeterminate, setIndeterminate] = useState(true);\n  const [checkAll, setCheckAll] = useState(false);\n\n  const buildDogObjects = data => {\n    return data.reduce((array, imgUrl) => {\n      const [url, breed, subbreed] = imgUrl.match(/.*\\/(\\w+)\\-?(\\w*)\\/.*$/);\n      const obj = {};\n      obj['name'] = !!subbreed ? subbreed : breed;\n      obj['breed'] = breed;\n      obj['subbreed'] = subbreed;\n      obj['img'] = url;\n      array.push(obj);\n      return array;\n    }, []);\n  };\n\n  const getDogs = breeds => {\n    const requests = !!breeds.length ? breeds.map(breed => axios.get(`https://dog.ceo/api/breed/${breed}/images`)) : [axios.get(`https://dog.ceo/api/breeds/image/random/12`)];\n    return axios.all([...requests]).then(res => {\n      const dogs = res.map(r => r.data.message);\n      return dogs.flat();\n    }).catch(err => console.error(err));\n  };\n\n  useEffect(() => {\n    getDogs(selectedBreeds).then(res => {\n      const dogObjects = buildDogObjects(res);\n      setDogs(dogObjects);\n    });\n  }, [selectedBreeds]);\n\n  const onChange = list => {\n    setCheckedList(list);\n    setIndeterminate(!!list.length && list.length < selectedBreeds.length);\n    setCheckAll(list.length === selectedBreeds.length);\n    setFilteredBreeds(dogs.filter(el => list.includes(el['name'])));\n  };\n\n  const onCheckAllChange = e => {\n    setCheckedList(e.target.checked ? selectedBreeds : []);\n    setIndeterminate(false);\n    setCheckAll(e.target.checked);\n  };\n\n  console.log(filteredBreeds);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"content\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"filter\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }\n  }, selectedBreeds.length > 0 && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Checkbox, {\n    indeterminate: indeterminate,\n    onChange: onCheckAllChange,\n    checked: checkAll,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }\n  }, \"All\"), /*#__PURE__*/React.createElement(CheckboxGroup, {\n    options: selectedBreeds.map(b => b.name),\n    value: selectedBreeds,\n    onChange: onChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"dog_cards\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }\n  }, dogs.length > 0 && dogs.map(dog => {\n    return /*#__PURE__*/React.createElement(DogCard, {\n      key: dog.img,\n      img_url: dog.img,\n      breed: dog.breed,\n      subbreed: dog.subbreed,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 20\n      }\n    });\n  })));\n};\n\nexport default Content;","map":{"version":3,"sources":["/home/daniel/Desktop/Hub3/hub3_take_home_challenge/hub3_take_home_challenge/src/components/search/Content.js"],"names":["React","useEffect","useState","Checkbox","Divider","Dogs","axios","DogCard","CheckboxGroup","Group","Content","selectedBreeds","filteredBreeds","setFilteredBreeds","dogs","setDogs","checkedList","setCheckedList","indeterminate","setIndeterminate","checkAll","setCheckAll","buildDogObjects","data","reduce","array","imgUrl","url","breed","subbreed","match","obj","push","getDogs","breeds","requests","length","map","get","all","then","res","r","message","flat","catch","err","console","error","dogObjects","onChange","list","filter","el","includes","onCheckAllChange","e","target","checked","log","b","name","dog","img"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport { Checkbox, Divider } from 'antd'\nimport Dogs from './Dogs'\nimport axios from 'axios'\nimport DogCard from './DogCard'\nconst CheckboxGroup = Checkbox.Group\n\nconst Content = ({ selectedBreeds }) => {\n  const [filteredBreeds, setFilteredBreeds] = useState(selectedBreeds)\n  const [dogs, setDogs] = useState([])\n  const [checkedList, setCheckedList] = useState([]);\n  const [indeterminate, setIndeterminate] = useState(true);\n  const [checkAll, setCheckAll] = useState(false);\n\n  const buildDogObjects = data => {\n    return data.reduce((array, imgUrl) => {\n      const [url, breed, subbreed] = imgUrl.match(/.*\\/(\\w+)\\-?(\\w*)\\/.*$/)\n      const obj = {}\n      obj['name'] = !!subbreed ? subbreed : breed\n      obj['breed'] = breed\n      obj['subbreed'] = subbreed\n      obj['img'] = url\n      array.push(obj)\n      return array\n    }, [])\n  }\n\n  const getDogs = breeds => {\n    const requests = !!breeds.length\n      ? breeds.map(breed => axios.get(`https://dog.ceo/api/breed/${breed}/images`))\n      : [axios.get(`https://dog.ceo/api/breeds/image/random/12`)]\n\n    return axios.all([...requests])\n      .then(res => {\n        const dogs = res.map(r => r.data.message)\n        return dogs.flat()\n      })\n      .catch(err => console.error(err))\n  }\n\n  useEffect(() => {\n    getDogs(selectedBreeds)\n      .then(res => {\n        const dogObjects = buildDogObjects(res)\n        setDogs(dogObjects)\n      })\n  }, [selectedBreeds])\n\n  const onChange = list => {\n    setCheckedList(list);\n    setIndeterminate(!!list.length && list.length < selectedBreeds.length);\n    setCheckAll(list.length === selectedBreeds.length);\n    setFilteredBreeds(\n      dogs.filter(el => list.includes(el['name']))\n    )\n  };\n\n  const onCheckAllChange = e => {\n    setCheckedList(e.target.checked ? selectedBreeds : []);\n    setIndeterminate(false);\n    setCheckAll(e.target.checked);\n  };\n\n  console.log(filteredBreeds)\n  return (\n    <div className=\"content\">\n      <div className=\"filter\">\n        {\n          selectedBreeds.length > 0 && <>\n            <Checkbox indeterminate={indeterminate} onChange={onCheckAllChange} checked={checkAll}>All</Checkbox>\n            <CheckboxGroup options={selectedBreeds.map(b => b.name)} value={selectedBreeds} onChange={onChange} />\n          </>\n        }\n      </div>\n      {/* <Dogs breed={breed} /> */}\n      <div className=\"dog_cards\">\n        {\n          dogs.length > 0 && dogs.map(dog => {\n            return <DogCard key={dog.img} img_url={dog.img} breed={dog.breed} subbreed={dog.subbreed} />\n          })\n        }\n      </div>\n    </div>\n  )\n}\n\nexport default Content\n"]},"metadata":{},"sourceType":"module"}